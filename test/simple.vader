Given ():
  Hello

Execute (Make sure Vim actually works.):
  Log "Run simple 'put' test."
  let t="Vim is working."
  put =t
  Log "Done."

Expect:
  Hello
  Vim is working.


Execute (FIXME: Check Python support.):
  " Note: vim.vars didn't make it into Vim until version 7.4. The commands
  " below might not work.
  Assert has('python') == 1, 'FAIL: Vim must have Python support.'
  Log 'Import modules.'
  python import os
  python import vim
  Log 'Yank/paste current line.'
  python vim.command('normal! yy2p')
  Log 'Add name of vader script to file'
  python vim.current.buffer.append(os.path.basename(vim.vars['vader_file']))
  Log 'Done.'

Expect:
  Hello
  Hello
  Hello
  simple.vader


Execute (Check IPython.):
  Assert has('python') == 1, 'FAIL: Vim must have Python support.'
  python import vim
  Log 'Import IPython.'
  python import IPython
  Log 'Check IPython version >= 1.'
  python vim.current.buffer.append(str(IPython.version_info[0] >= 1))
  Log 'Done.'

Expect:
  Hello
  True


Before (set filetype to Python):
  Log 'Enable filetype plugin.'
  filetype plugin on
  Log 'Set filetype=python.'
  set ft=python
  Log '[before] done.'

Execute (Ensure vim_python ftplugin loads):
  Assert has('python') == 1, 'FAIL: Vim must have Python support.'
  python import vim
  python vim.current.buffer.append("filetype is " + vim.eval("&ft"))
  AssertEqual 'python', &filetype
  python vim.current.buffer.append("IPython command exists: " + vim.eval("exists(':IPython') != 0"))
  python vim.command("IPython")
  python import vim_ipython
  python vim.current.buffer.append("vim_ipython loaded")
  Log 'Done.'

Expect:
  Hello
  filetype is python
  IPython command exists: 1
  vim_ipython loaded


Given ():
  " ".join(["Vim", "+", "IPython", "==", "nifty"])

Before (set filetype to Python):
  filetype plugin on
  set ft=python
  IPython

Execute (Run a command and get its result from the preview window.):
  python import vim_ipython
  Log 'Restarting kernel to reset execution counter.'
  python vim_ipython.kc.shutdown(True)
  Log 'Running current line: `' . getline('.') .'`'
  python vim_ipython.run_this_line()
  Log 'Copying results from preview window.'
  " Switch to the preview window, move to the line with the "In []" command,
  " then delete all the output
  wincmd P
  normal gg
  /^In \+\[
  normal VGd
  " Switch back to the previous window, and paste the output.
  wincmd p
  normal p
  Log 'Done.'

Expect ():
  " ".join(["Vim", "+", "IPython", "==", "nifty"])
  In [1]: " ".join(["Vim", "+", "IPython", "==", "nifty"])
  Out[1]: 'Vim + IPython == nifty'
  
